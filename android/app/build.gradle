apply plugin: "com.android.application"
apply plugin: "io.fabric"
apply plugin: "com.google.firebase.firebase-perf"

// For react-native-config
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-sentry/sentry.gradle"

project.ext.vectoricons = [
    iconFontNames: [ 'MaterialIcons.ttf', 'IoniIcons.ttf', 'FontAwesome.ttf' ] // Name of the font files you want to copy
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "io.mcaboydigital.tagg.fastlane"
        minSdkVersion 16
        targetSdkVersion rootProject.targetSdkVersion
        multiDexEnabled true
        versionCode 9
        versionName "0.1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            //storeFile file(System.getenv("TAGG_RELEASE_STORE_FILE"))
            //storePassword System.getenv("TAGG_RELEASE_STORE_PASSWORD")
            //keyAlias System.getenv("TAGG_RELEASE_KEY_ALIAS")
            //keyPassword System.getenv("TAGG_RELEASE_KEY_PASSWORD")
            storeFile file("/Users/jonathanmcaboy/Desktop/Dev/Tagg/android/secure/tagg-key.keystore")
            storePassword "HHCdty28"
            keyAlias "tagg-key-alias"
            keyPassword "HHCdty28"
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    buildToolsVersion '27.0.3'
}

dependencies {
    compile project(':react-native-sentry')
    compile project(':react-native-vector-icons')
    compile project(':react-native-image-picker')
    compile project(':react-native-fbsdk')
    compile project(':react-native-fast-image')
    compile project(':react-native-background-geolocation')
    //compile project(':react-native-fbsdk')
    compile project(':react-native-config')
    compile(project(':react-native-firebase')) {
        transitive = false
    }
    implementation (project(':react-native-firebase')) {
        transitive = false
    }
    implementation project(':react-native-firebase')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-fbsdk')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //compile "com.android.support:appcompat-v7:23.0.1"
    //implementation 'com.android.support:appcompat-v7:26'
    //compile 'com.android.support:design:26'
    //compile 'com.android.support:recyclerview-v7:26'
    implementation 'com.android.support:cardview-v7:26'
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'com.facebook.android:facebook-android-sdk:4.35.0'
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-background-geolocation')
    implementation project(':react-native-background-fetch')
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibVersion"

    // Firebase dependencies
    //implementation 'com.google.firebase:firebase-analytics:16.0.1'
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation "com.google.android.gms:play-services-base:15.0.1"
    implementation 'com.google.firebase:firebase-firestore:17.0.2'
    // We may end up using 15.1.0 instead instead of 16.0.1 for auth
    implementation 'com.google.firebase:firebase-auth:16.0.2'
    implementation "com.google.firebase:firebase-storage:16.0.1"
    implementation "com.google.firebase:firebase-messaging:17.1.0"
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar' // <-- Add this line if you wish to use badge on Android
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
      transitive = true
    }
    implementation "com.google.firebase:firebase-perf:16.0.0"

    implementation project(':react-native-fast-image')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

