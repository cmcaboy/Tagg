// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  Following,
  DateBidList,
  DateBid,
  DateItem,
  DateList,
  Queue,
  MatchList,
  Match,
  Message,
  MessageItem
} from "../graphqlgen/testModel";
type Context = any;

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUser {
    id: string | null;
    hostId: string | null;
  }

  export interface ArgsMessages {
    id: string;
  }

  export interface ArgsDate {
    id: string;
  }

  export interface ArgsDates {
    id: string;
  }

  export interface ArgsOtherBids {
    id: string;
  }

  export interface ArgsMoreMessages {
    id: string;
    cursor: string;
  }

  export interface ArgsMoreQueue {
    followerDisplay: string | null;
    cursor: number;
  }

  export interface ArgsMoreDates {
    id: string;
    cursor: number;
  }

  export interface ArgsMoreDateBids {
    id: string;
    cursor: number;
  }

  export interface ArgsMoreFollowing {
    id: string;
    cursor: number;
  }

  export type UserResolver = (
    parent: undefined,
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type MessagesResolver = (
    parent: undefined,
    args: ArgsMessages,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message | null | Promise<Message | null>;

  export type DateResolver = (
    parent: undefined,
    args: ArgsDate,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateItem | null | Promise<DateItem | null>;

  export type DatesResolver = (
    parent: undefined,
    args: ArgsDates,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateList | null | Promise<DateList | null>;

  export type OtherBidsResolver = (
    parent: undefined,
    args: ArgsOtherBids,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateBidList | null | Promise<DateBidList | null>;

  export type MoreMessagesResolver = (
    parent: undefined,
    args: ArgsMoreMessages,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message | null | Promise<Message | null>;

  export type MoreQueueResolver = (
    parent: undefined,
    args: ArgsMoreQueue,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Queue | null | Promise<Queue | null>;

  export type MoreDatesResolver = (
    parent: undefined,
    args: ArgsMoreDates,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateList | null | Promise<DateList | null>;

  export type MoreDateBidsResolver = (
    parent: undefined,
    args: ArgsMoreDateBids,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateBidList | null | Promise<DateBidList | null>;

  export type MoreFollowingResolver = (
    parent: undefined,
    args: ArgsMoreFollowing,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Following | null | Promise<Following | null>;

  export interface Type {
    user: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    messages: (
      parent: undefined,
      args: ArgsMessages,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Message | null | Promise<Message | null>;

    date: (
      parent: undefined,
      args: ArgsDate,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateItem | null | Promise<DateItem | null>;

    dates: (
      parent: undefined,
      args: ArgsDates,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateList | null | Promise<DateList | null>;

    otherBids: (
      parent: undefined,
      args: ArgsOtherBids,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateBidList | null | Promise<DateBidList | null>;

    moreMessages: (
      parent: undefined,
      args: ArgsMoreMessages,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Message | null | Promise<Message | null>;

    moreQueue: (
      parent: undefined,
      args: ArgsMoreQueue,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Queue | null | Promise<Queue | null>;

    moreDates: (
      parent: undefined,
      args: ArgsMoreDates,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateList | null | Promise<DateList | null>;

    moreDateBids: (
      parent: undefined,
      args: ArgsMoreDateBids,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateBidList | null | Promise<DateBidList | null>;

    moreFollowing: (
      parent: undefined,
      args: ArgsMoreFollowing,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Following | null | Promise<Following | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => (parent.id === undefined ? null : parent.id),
    active: (parent: User) =>
      parent.active === undefined ? null : parent.active,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    age: (parent: User) => (parent.age === undefined ? null : parent.age),
    description: (parent: User) =>
      parent.description === undefined ? null : parent.description,
    school: (parent: User) =>
      parent.school === undefined ? null : parent.school,
    work: (parent: User) => (parent.work === undefined ? null : parent.work),
    sendNotifications: (parent: User) =>
      parent.sendNotifications === undefined ? null : parent.sendNotifications,
    viewObjectionable: (parent: User) =>
      parent.viewObjectionable === undefined ? null : parent.viewObjectionable,
    gender: (parent: User) =>
      parent.gender === undefined ? null : parent.gender,
    distance: (parent: User) =>
      parent.distance === undefined ? null : parent.distance,
    token: (parent: User) => (parent.token === undefined ? null : parent.token),
    latitude: (parent: User) =>
      parent.latitude === undefined ? null : parent.latitude,
    longitude: (parent: User) =>
      parent.longitude === undefined ? null : parent.longitude,
    minAgePreference: (parent: User) =>
      parent.minAgePreference === undefined ? null : parent.minAgePreference,
    maxAgePreference: (parent: User) =>
      parent.maxAgePreference === undefined ? null : parent.maxAgePreference,
    followerDisplay: (parent: User) =>
      parent.followerDisplay === undefined ? null : parent.followerDisplay,
    match: (parent: User) => (parent.match === undefined ? null : parent.match),
    distanceApart: (parent: User) =>
      parent.distanceApart === undefined ? null : parent.distanceApart,
    order: (parent: User) => (parent.order === undefined ? null : parent.order),
    registerDateTime: (parent: User) =>
      parent.registerDateTime === undefined ? null : parent.registerDateTime,
    pics: (parent: User) => (parent.pics === undefined ? null : parent.pics),
    profilePic: (parent: User) =>
      parent.profilePic === undefined ? null : parent.profilePic,
    hasDateOpen: (parent: User) =>
      parent.hasDateOpen === undefined ? null : parent.hasDateOpen,
    isFollowing: (parent: User) =>
      parent.isFollowing === undefined ? null : parent.isFollowing,
    objectionable: (parent: User) =>
      parent.objectionable === undefined ? null : parent.objectionable
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ActiveResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AgeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type DescriptionResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type SchoolResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type WorkResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type SendNotificationsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type ViewObjectionableResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type GenderResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DistanceResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type TokenResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LatitudeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type LongitudeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type MinAgePreferenceResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type MaxAgePreferenceResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type FollowerDisplayResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type MatchResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type DistanceApartResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type OrderResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type RegisterDateTimeResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type PicsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | null | Promise<string[] | null>;

  export type ProfilePicResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type HasDateOpenResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type IsFollowingResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type FollowingResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Following | null | Promise<Following | null>;

  export type BidsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateBidList | null | Promise<DateBidList | null>;

  export type DateRequestsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateList | null | Promise<DateList | null>;

  export type QueueResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Queue | null | Promise<Queue | null>;

  export type MatchedDatesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MatchList | null | Promise<MatchList | null>;

  export type ObjectionableResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    active: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    age: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    description: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    school: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    work: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    sendNotifications: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    viewObjectionable: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    gender: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    distance: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    token: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    latitude: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    longitude: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    minAgePreference: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    maxAgePreference: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    followerDisplay: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    match: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    distanceApart: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    order: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    registerDateTime: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    pics: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | null | Promise<string[] | null>;

    profilePic: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    hasDateOpen: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    isFollowing: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    following: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Following | null | Promise<Following | null>;

    bids: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateBidList | null | Promise<DateBidList | null>;

    dateRequests: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateList | null | Promise<DateList | null>;

    queue: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Queue | null | Promise<Queue | null>;

    matchedDates: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MatchList | null | Promise<MatchList | null>;

    objectionable: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;
  }
}

export namespace FollowingResolvers {
  export const defaultResolvers = {
    id: (parent: Following) => (parent.id === undefined ? null : parent.id),
    cursor: (parent: Following) =>
      parent.cursor === undefined ? null : parent.cursor
  };

  export type IdResolver = (
    parent: Following,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ListResolver = (
    parent: Following,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | null | Promise<User[] | null>;

  export type CursorResolver = (
    parent: Following,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: Following,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    list: (
      parent: Following,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | null | Promise<User[] | null>;

    cursor: (
      parent: Following,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace DateBidListResolvers {
  export const defaultResolvers = {
    id: (parent: DateBidList) => (parent.id === undefined ? null : parent.id),
    cursor: (parent: DateBidList) =>
      parent.cursor === undefined ? null : parent.cursor,
    list: (parent: DateBidList) =>
      parent.list === undefined ? null : parent.list
  };

  export type IdResolver = (
    parent: DateBidList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ListResolver = (
    parent: DateBidList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateBid[] | null | Promise<DateBid[] | null>;

  export type CursorResolver = (
    parent: DateBidList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: DateBidList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    list: (
      parent: DateBidList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateBid[] | null | Promise<DateBid[] | null>;

    cursor: (
      parent: DateBidList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace DateBidResolvers {
  export const defaultResolvers = {
    id: (parent: DateBid) => (parent.id === undefined ? null : parent.id),
    datetimeOfBid: (parent: DateBid) =>
      parent.datetimeOfBid === undefined ? null : parent.datetimeOfBid,
    bidDescription: (parent: DateBid) =>
      parent.bidDescription === undefined ? null : parent.bidDescription,
    bidPlace: (parent: DateBid) =>
      parent.bidPlace === undefined ? null : parent.bidPlace
  };

  export type IdResolver = (
    parent: DateBid,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DatetimeOfBidResolver = (
    parent: DateBid,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type BidDescriptionResolver = (
    parent: DateBid,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type BidPlaceResolver = (
    parent: DateBid,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DateUserResolver = (
    parent: DateBid,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type BidUserResolver = (
    parent: DateBid,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type DateResolver = (
    parent: DateBid,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateItem | null | Promise<DateItem | null>;

  export interface Type {
    id: (
      parent: DateBid,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    datetimeOfBid: (
      parent: DateBid,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    bidDescription: (
      parent: DateBid,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    bidPlace: (
      parent: DateBid,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    dateUser: (
      parent: DateBid,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    bidUser: (
      parent: DateBid,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    date: (
      parent: DateBid,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateItem | null | Promise<DateItem | null>;
  }
}

export namespace DateItemResolvers {
  export const defaultResolvers = {
    id: (parent: DateItem) => (parent.id === undefined ? null : parent.id),
    creationTime: (parent: DateItem) =>
      parent.creationTime === undefined ? null : parent.creationTime,
    datetimeOfDate: (parent: DateItem) =>
      parent.datetimeOfDate === undefined ? null : parent.datetimeOfDate,
    description: (parent: DateItem) =>
      parent.description === undefined ? null : parent.description,
    num_bids: (parent: DateItem) =>
      parent.num_bids === undefined ? null : parent.num_bids,
    open: (parent: DateItem) =>
      parent.open === undefined ? null : parent.open,
    creationTimeEpoch: (parent: DateItem) =>
      parent.creationTimeEpoch === undefined ? null : parent.creationTimeEpoch,
    order: (parent: DateItem) =>
      parent.order === undefined ? null : parent.order
  };

  export type IdResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatorResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type WinnerResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type CreationTimeResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DatetimeOfDateResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type DescriptionResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type BidsResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateBidList | null | Promise<DateBidList | null>;

  export type Num_bidsResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type OpenResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type CreationTimeEpochResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type OrderResolver = (
    parent: DateItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    creator: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    winner: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    creationTime: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    datetimeOfDate: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    description: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    bids: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateBidList | null | Promise<DateBidList | null>;

    num_bids: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    open: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    creationTimeEpoch: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    order: (
      parent: DateItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace DateListResolvers {
  export const defaultResolvers = {
    id: (parent: DateList) => (parent.id === undefined ? null : parent.id),
    cursor: (parent: DateList) =>
      parent.cursor === undefined ? null : parent.cursor,
    list: (parent: DateList) => (parent.list === undefined ? null : parent.list)
  };

  export type IdResolver = (
    parent: DateList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ListResolver = (
    parent: DateList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateItem[] | null | Promise<DateItem[] | null>;

  export type CursorResolver = (
    parent: DateList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: DateList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    list: (
      parent: DateList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateItem[] | null | Promise<DateItem[] | null>;

    cursor: (
      parent: DateList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace QueueResolvers {
  export const defaultResolvers = {
    id: (parent: Queue) => (parent.id === undefined ? null : parent.id),
    cursor: (parent: Queue) =>
      parent.cursor === undefined ? null : parent.cursor,
    list: (parent: Queue) => (parent.list === undefined ? null : parent.list)
  };

  export type IdResolver = (
    parent: Queue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ListResolver = (
    parent: Queue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | null | Promise<User[] | null>;

  export type CursorResolver = (
    parent: Queue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: Queue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    list: (
      parent: Queue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | null | Promise<User[] | null>;

    cursor: (
      parent: Queue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace MatchListResolvers {
  export const defaultResolvers = {
    id: (parent: MatchList) => (parent.id === undefined ? null : parent.id),
    cursor: (parent: MatchList) =>
      parent.cursor === undefined ? null : parent.cursor,
    list: (parent: MatchList) =>
      parent.list === undefined ? null : parent.list
  };

  export type IdResolver = (
    parent: MatchList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ListResolver = (
    parent: MatchList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Match[] | null | Promise<Match[] | null>;

  export type CursorResolver = (
    parent: MatchList,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: MatchList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    list: (
      parent: MatchList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Match[] | null | Promise<Match[] | null>;

    cursor: (
      parent: MatchList,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace MatchResolvers {
  export const defaultResolvers = {
    id: (parent: Match) => (parent.id === undefined ? null : parent.id),
    matchId: (parent: Match) =>
      parent.matchId === undefined ? null : parent.matchId,
    winnerId: (parent: Match) =>
      parent.winnerId === undefined ? null : parent.winnerId,
    description: (parent: Match) =>
      parent.description === undefined ? null : parent.description,
    datetimeOfDate: (parent: Match) =>
      parent.datetimeOfDate === undefined ? null : parent.datetimeOfDate
  };

  export type IdResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type MatchIdResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type WinnerIdResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UserResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type DescriptionResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DatetimeOfDateResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type MessagesResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Message | null | Promise<Message | null>;

  export type LastMessageResolver = (
    parent: Match,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MessageItem | null | Promise<MessageItem | null>;

  export interface Type {
    id: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    matchId: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    winnerId: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    user: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    description: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    datetimeOfDate: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    messages: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Message | null | Promise<Message | null>;

    lastMessage: (
      parent: Match,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MessageItem | null | Promise<MessageItem | null>;
  }
}

export namespace MessageResolvers {
  export const defaultResolvers = {
    id: (parent: Message) => (parent.id === undefined ? null : parent.id),
    cursor: (parent: Message) =>
      parent.cursor === undefined ? null : parent.cursor
  };

  export type IdResolver = (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CursorResolver = (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type ListResolver = (
    parent: Message,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MessageItem[] | Promise<MessageItem[]>;

  export interface Type {
    id: (
      parent: Message,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    cursor: (
      parent: Message,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    list: (
      parent: Message,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MessageItem[] | Promise<MessageItem[]>;
  }
}

export namespace MessageItemResolvers {
  export const defaultResolvers = {
    name: (parent: MessageItem) =>
      parent.name === undefined ? null : parent.name,
    avatar: (parent: MessageItem) =>
      parent.avatar === undefined ? null : parent.avatar,
    _id: (parent: MessageItem) =>
      parent._id === undefined ? null : parent._id,
    createdAt: (parent: MessageItem) =>
      parent.createdAt === undefined ? null : parent.createdAt,
    text: (parent: MessageItem) =>
      parent.text === undefined ? null : parent.text,
    order: (parent: MessageItem) =>
      parent.order === undefined ? null : parent.order,
    uid: (parent: MessageItem) => (parent.uid === undefined ? null : parent.uid)
  };

  export type NameResolver = (
    parent: MessageItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AvatarResolver = (
    parent: MessageItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type _idResolver = (
    parent: MessageItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: MessageItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type TextResolver = (
    parent: MessageItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type OrderResolver = (
    parent: MessageItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type UidResolver = (
    parent: MessageItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    name: (
      parent: MessageItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    avatar: (
      parent: MessageItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    _id: (
      parent: MessageItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: MessageItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    text: (
      parent: MessageItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    order: (
      parent: MessageItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    uid: (
      parent: MessageItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsEditUser {
    id: string;
    name: string | null;
    active: boolean | null;
    email: string | null;
    gender: string | null;
    age: number | null;
    description: string | null;
    school: string | null;
    work: string | null;
    sendNotifications: boolean | null;
    distance: number | null;
    token: string | null;
    latitude: number | null;
    longitude: number | null;
    registerDateTime: number | null;
    minAgePreference: number | null;
    maxAgePreference: number | null;
    followerDisplay: string | null;
    objectionable: boolean | null;
    viewObjectionable: boolean | null;
    pics: string[] | null;
  }

  export interface ArgsEditUserQueue {
    id: string;
    sendNotifications: boolean | null;
    distance: number | null;
    minAgePreference: number | null;
    maxAgePreference: number | null;
    followPreference: number | null;
  }

  export interface ArgsNewUser {
    id: string;
    name: string;
    active: boolean | null;
    email: string;
    gender: string | null;
    age: number | null;
    description: string | null;
    school: string | null;
    work: string | null;
    sendNotifications: boolean | null;
    distance: number | null;
    token: string | null;
    latitude: number | null;
    longitude: number | null;
    registerDateTime: number | null;
    minAgePreference: number | null;
    maxAgePreference: number | null;
    followerDisplay: string | null;
    objectionable: boolean | null;
    viewObjectionable: boolean | null;
    pics: string[] | null;
  }

  export interface ArgsNewMessage {
    matchId: string;
    name: string | null;
    text: string | null;
    createdAt: string | null;
    avatar: string | null;
    order: number | null;
    uid: string | null;
    _id: string | null;
    receiverId: string | null;
  }

  export interface ArgsFollow {
    id: string;
    followId: string;
    isFollowing: boolean | null;
  }

  export interface ArgsUnFollow {
    id: string;
    unFollowId: string;
  }

  export interface ArgsBid {
    id: string;
    dateId: string;
    bidPlace: string | null;
    bidDescription: string | null;
  }

  export interface ArgsCreateDate {
    id: string;
    datetimeOfDate: number | null;
    description: string | null;
  }

  export interface ArgsChooseWinner {
    id: string;
    winnerId: string;
    dateId: string;
  }

  export interface ArgsFlag {
    id: string;
    flaggedId: string;
    block: boolean | null;
  }

  export interface ArgsBlock {
    id: string;
    blockedId: string;
  }

  export interface ArgsRemoveUser {
    id: string | null;
  }

  export type EditUserResolver = (
    parent: undefined,
    args: ArgsEditUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type EditUserQueueResolver = (
    parent: undefined,
    args: ArgsEditUserQueue,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Queue | null | Promise<Queue | null>;

  export type NewUserResolver = (
    parent: undefined,
    args: ArgsNewUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type NewMessageResolver = (
    parent: undefined,
    args: ArgsNewMessage,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MessageItem | null | Promise<MessageItem | null>;

  export type FollowResolver = (
    parent: undefined,
    args: ArgsFollow,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type UnFollowResolver = (
    parent: undefined,
    args: ArgsUnFollow,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type BidResolver = (
    parent: undefined,
    args: ArgsBid,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateBid | null | Promise<DateBid | null>;

  export type CreateDateResolver = (
    parent: undefined,
    args: ArgsCreateDate,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => DateItem | null | Promise<DateItem | null>;

  export type ChooseWinnerResolver = (
    parent: undefined,
    args: ArgsChooseWinner,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Match | null | Promise<Match | null>;

  export type FlagResolver = (
    parent: undefined,
    args: ArgsFlag,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type BlockResolver = (
    parent: undefined,
    args: ArgsBlock,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type RemoveUserResolver = (
    parent: undefined,
    args: ArgsRemoveUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    editUser: (
      parent: undefined,
      args: ArgsEditUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    editUserQueue: (
      parent: undefined,
      args: ArgsEditUserQueue,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Queue | null | Promise<Queue | null>;

    newUser: (
      parent: undefined,
      args: ArgsNewUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    newMessage: (
      parent: undefined,
      args: ArgsNewMessage,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MessageItem | null | Promise<MessageItem | null>;

    follow: (
      parent: undefined,
      args: ArgsFollow,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    unFollow: (
      parent: undefined,
      args: ArgsUnFollow,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    bid: (
      parent: undefined,
      args: ArgsBid,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateBid | null | Promise<DateBid | null>;

    createDate: (
      parent: undefined,
      args: ArgsCreateDate,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => DateItem | null | Promise<DateItem | null>;

    chooseWinner: (
      parent: undefined,
      args: ArgsChooseWinner,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Match | null | Promise<Match | null>;

    flag: (
      parent: undefined,
      args: ArgsFlag,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    block: (
      parent: undefined,
      args: ArgsBlock,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    removeUser: (
      parent: undefined,
      args: ArgsRemoveUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export interface ArgsNewMessageSub {
    matchId: string | null;
    id: string | null;
  }

  export type NewMessageSubResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsNewMessageSub,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<MessageItem | null>
      | Promise<AsyncIterator<MessageItem | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsNewMessageSub,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MessageItem | null | Promise<MessageItem | null>;
  };

  export interface Type {
    newMessageSub: {
      subscribe: (
        parent: undefined,
        args: ArgsNewMessageSub,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<MessageItem | null>
        | Promise<AsyncIterator<MessageItem | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsNewMessageSub,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MessageItem | null | Promise<MessageItem | null>;
    };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Following: FollowingResolvers.Type;
  DateBidList: DateBidListResolvers.Type;
  DateBid: DateBidResolvers.Type;
  DateItem: DateItemResolvers.Type;
  DateList: DateListResolvers.Type;
  Queue: QueueResolvers.Type;
  MatchList: MatchListResolvers.Type;
  Match: MatchResolvers.Type;
  Message: MessageResolvers.Type;
  MessageItem: MessageItemResolvers.Type;
  Mutation: MutationResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
}
